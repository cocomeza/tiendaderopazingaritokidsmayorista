const puppeteer = require('puppeteer')

async function testFavoritesFrontend() {
  console.log('üß™ PROBANDO FAVORITOS DESDE EL FRONTEND')
  console.log('=====================================')

  const browser = await puppeteer.launch({ 
    headless: false, // Mostrar el navegador para debugging
    defaultViewport: null,
    args: ['--start-maximized']
  })

  try {
    const page = await browser.newPage()
    
    // Navegar a la p√°gina de productos
    console.log('1Ô∏è‚É£ Navegando a la p√°gina de productos...')
    await page.goto('http://localhost:3003/productos', { waitUntil: 'networkidle2' })
    
    // Esperar a que carguen los productos
    await page.waitForSelector('[data-testid="product-card"], .group', { timeout: 10000 })
    console.log('‚úÖ P√°gina de productos cargada')

    // Buscar el bot√≥n de favoritos (coraz√≥n)
    console.log('2Ô∏è‚É£ Buscando botones de favoritos...')
    const heartButtons = await page.$$('button:has(svg[class*="Heart"])')
    
    if (heartButtons.length === 0) {
      console.log('‚ö†Ô∏è No se encontraron botones de favoritos')
      
      // Buscar alternativamente por el √≠cono de coraz√≥n
      const heartIcons = await page.$$('svg[class*="Heart"]')
      console.log(`üîç Encontrados ${heartIcons.length} √≠conos de coraz√≥n`)
      
      if (heartIcons.length > 0) {
        // Buscar el bot√≥n padre
        const parentButtons = await page.$$('button')
        console.log(`üîç Encontrados ${parentButtons.length} botones en total`)
        
        // Buscar botones que contengan el √≠cono de coraz√≥n
        for (let i = 0; i < parentButtons.length; i++) {
          const button = parentButtons[i]
          const heartIcon = await button.$('svg[class*="Heart"]')
          if (heartIcon) {
            console.log(`‚úÖ Encontrado bot√≥n de favoritos en posici√≥n ${i}`)
            heartButtons.push(button)
            break
          }
        }
      }
    }

    if (heartButtons.length === 0) {
      console.log('‚ùå No se pudieron encontrar botones de favoritos')
      
      // Tomar screenshot para debugging
      await page.screenshot({ path: 'debug-no-favorites.png', fullPage: true })
      console.log('üì∏ Screenshot guardado como debug-no-favorites.png')
      return
    }

    console.log(`‚úÖ Encontrados ${heartButtons.length} botones de favoritos`)

    // Hacer clic en el primer bot√≥n de favoritos
    console.log('3Ô∏è‚É£ Haciendo clic en el primer bot√≥n de favoritos...')
    await heartButtons[0].click()
    
    // Esperar un momento para que se procese
    await page.waitForTimeout(2000)

    // Verificar si apareci√≥ alg√∫n mensaje de toast o notificaci√≥n
    console.log('4Ô∏è‚É£ Verificando notificaciones...')
    const toastElements = await page.$$('[data-sonner-toast], .toast, [role="alert"]')
    console.log(`üîî Encontradas ${toastElements.length} notificaciones`)

    // Verificar si el usuario est√° autenticado
    console.log('5Ô∏è‚É£ Verificando estado de autenticaci√≥n...')
    const loginButton = await page.$('a[href*="login"], button:has-text("Iniciar sesi√≥n")')
    const userMenu = await page.$('[data-testid="user-menu"], .user-menu')
    
    if (loginButton && !userMenu) {
      console.log('‚ö†Ô∏è Usuario no autenticado - redirigiendo a login')
      
      // Verificar si se redirigi√≥ a login
      await page.waitForTimeout(3000)
      const currentUrl = page.url()
      console.log(`üìç URL actual: ${currentUrl}`)
      
      if (currentUrl.includes('/auth/login')) {
        console.log('‚úÖ Redirecci√≥n a login funcionando correctamente')
      } else {
        console.log('‚ùå No se redirigi√≥ a login como se esperaba')
      }
    } else {
      console.log('‚úÖ Usuario autenticado - probando funcionalidad de favoritos')
      
      // Verificar si el bot√≥n cambi√≥ de estado
      const heartIcon = await heartButtons[0].$('svg[class*="Heart"]')
      if (heartIcon) {
        const classes = await heartIcon.evaluate(el => el.className)
        console.log(`üé® Clases del √≠cono: ${classes}`)
        
        if (classes.includes('fill-current')) {
          console.log('‚úÖ El producto se agreg√≥ a favoritos (√≠cono lleno)')
        } else {
          console.log('‚ö†Ô∏è El √≠cono no cambi√≥ de estado')
        }
      }
    }

    // Navegar a la p√°gina de favoritos
    console.log('6Ô∏è‚É£ Navegando a la p√°gina de favoritos...')
    await page.goto('http://localhost:3003/favoritos', { waitUntil: 'networkidle2' })
    
    // Verificar si hay productos en favoritos
    const favoriteProducts = await page.$$('[data-testid="product-card"], .group')
    console.log(`‚ù§Ô∏è Productos en favoritos: ${favoriteProducts.length}`)

    if (favoriteProducts.length > 0) {
      console.log('‚úÖ La funcionalidad de favoritos est√° funcionando correctamente')
    } else {
      console.log('‚ö†Ô∏è No se encontraron productos en favoritos')
    }

    // Tomar screenshot final
    await page.screenshot({ path: 'favorites-test-result.png', fullPage: true })
    console.log('üì∏ Screenshot final guardado como favorites-test-result.png')

  } catch (error) {
    console.error('‚ùå Error durante la prueba:', error.message)
    
    // Tomar screenshot del error
    try {
      await page.screenshot({ path: 'favorites-test-error.png', fullPage: true })
      console.log('üì∏ Screenshot del error guardado como favorites-test-error.png')
    } catch (screenshotError) {
      console.error('‚ùå Error tomando screenshot:', screenshotError.message)
    }
  } finally {
    await browser.close()
  }
}

testFavoritesFrontend()

